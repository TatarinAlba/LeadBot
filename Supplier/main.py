from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from respositories import AccountRepository, CategoryRepository, AccountWithCategoryRepository
from model import Account, Account_by_category, Category
from config import TOKEN
import markups as nav
import re
import logging

bot = Bot(token=TOKEN) # getting information about the token from the text file
storage = MemoryStorage()
logging.basicConfig(level=logging.INFO, filename="logs.log",filemode="w")
dp = Dispatcher(bot, storage=storage)
account_repo = AccountRepository()
category_repo = CategoryRepository()
account_and_category_repo = AccountWithCategoryRepository()

base_is_empty = len(account_repo.getAllAcounts()) == 0

class WorkingStates(StatesGroup):
    work = State()
    wait = State()

globalState: FSMContext = WorkingStates.wait

@dp.message_handler(commands="start", state="*")
async def starting_process(message: types.Message):
    global base_is_empty 
    if message.chat.type == "private":
        admin = account_repo.getAccountById(message.from_user.id)
        if (base_is_empty):
            admin = Account(message.from_user.id) 
            base_is_empty = False
            account_repo.addAccount(admin)
            await bot.send_message(chat_id=message.from_id, text="–ü—Ä–∏–≤–µ—Ç! ü§ñüëãüòä\n\n–Ø —Ä–∞–¥ –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å! –Ø –±–æ—Ç –≤ Telegram, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ª–∏–¥—ã –¥–ª—è –≤–∞—Å. –ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –±–æ–ª—å—à–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å –ø—Ä–æ–¥–∞–∂–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫–æ –º–Ω–µ. –Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! üòäüëç", reply_markup=nav.account_menu)


# @dp.callback_query_handler(text="register")
# async def registration_process(query_call: types.CallbackQuery):
#     account = account_repo.getAccountById(query_call.from_user.id)
#     if account is not None:
#         await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
#         await bot.send_message(chat_id=query_call.from_user.id, text="üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å.")
#     else:
#         await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
#         account = Account(query_call.from_user.id)
#         account_repo.addAccount(account)
#         await bot.send_message(chat_id=query_call.from_user.id, text="‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–í–æ–π—Ç–∏\".")


# @dp.callback_query_handler(text="login")
# async def wait_for_name(query_call: types.CallbackQuery, state: FSMContext):
#         await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
#         account = account_repo.getAccountById(query_call.from_user.id)
#         if account is None:
#             await bot.send_message(chat_id=query_call.from_user.id, text="üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
#         else:
#             await bot.send_message(chat_id=query_call.from_user.id, text="‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.\n\n–í–µ—Å—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞–º, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∏–∂–µ.", reply_markup=nav.account_menu)


@dp.callback_query_handler(text="category_menu", state="*")
async def category_menu_output(query_call: types.CallbackQuery):
    await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
    await bot.send_message(chat_id=query_call.from_user.id, text="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å", reply_markup=nav.categories_menu)

@dp.callback_query_handler(text="fulfilment", state="*")
async def category_menu_output(query_call: types.CallbackQuery, state: FSMContext):
    global globalState
    category = category_repo.getCategoryByName("Fulfilment")
    if (category == None):
        category = Category("Fulfilment")
        category_repo.addCategory(category)
    account_telegram = query_call.from_user.id
    account_with_category = Account_by_category(category.id, account_telegram)
    if account_and_category_repo.getAccountForCategory(account_with_category) != None:
        await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
        await bot.send_message(chat_id=query_call.from_user.id, text="üö´ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ\n\nü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status", reply_markup=nav.categories_menu)
        return 
    account_and_category_repo.addAccountForCategory(account_with_category)
    await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
    await bot.send_message(chat_id=query_call.from_user.id, text="‚úÖ –£—Å–ø–µ—à–Ω–æ\n\nü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞–±–æ—Ç—ã, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∞—Ç—å.\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status", reply_markup=nav.categories_menu)
    await state.set_state(WorkingStates.work)
    globalState = WorkingStates.work

@dp.callback_query_handler(text="close", state="*")
async def close_window(query_call:types.CallbackQuery):
    await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)

@dp.message_handler(commands="status", state="*")
async def bot_status(message: types.Message, state: FSMContext):
    global globalState
    if not base_is_empty and message.chat.type == "private":
        current_state = await state.get_state()
        if current_state == "WorkingStates:work":
            await bot.send_message(chat_id=message.from_user.id, text="ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=nav.control_menu)
        elif current_state != None:
            globalState = WorkingStates.wait
            await state.set_state(WorkingStates.wait)
            await bot.send_message(chat_id=message.from_user.id, text="ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=nav.control_menu)
        else:
            await bot.send_message(chat_id=message.from_user.id, text="ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ - –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!", reply_markup=nav.control_menu)

@dp.callback_query_handler(text="stop_button", state="*")
async def close_window(query_call:types.CallbackQuery, state: FSMContext):
    global globalState
    await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
    current_state = await state.get_state()
    if current_state != "WorkingStates:work":
        await bot.send_message(chat_id=query_call.from_user.id, text="üö´ –ë–æ—Ç —É–∂–µ –Ω–∞ –ø–∞–∑—É–µ. –ù–µ–ª—å–∑—è –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑!", reply_markup=nav.control_menu)
    else:
        globalState = WorkingStates.wait
        await state.set_state(WorkingStates.wait)
        await bot.send_message(chat_id=query_call.from_user.id, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=nav.control_menu)

@dp.callback_query_handler(text="start_button", state="*")
async def close_window(query_call:types.CallbackQuery, state: FSMContext):
    global globalState
    await bot.delete_message(chat_id=query_call.from_user.id, message_id = query_call.message.message_id)
    current_state = await state.get_state()
    if current_state == "WorkingStates:work":
        await bot.send_message(chat_id=query_call.from_user.id, text="üö´ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ù–µ–ª—å–∑—è –µ–≥–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ—â—ë —Ä–∞–∑!", reply_markup=nav.control_menu)
    else:
        globalState = WorkingStates.work
        await state.set_state(WorkingStates.work)
        await bot.send_message(chat_id=query_call.from_user.id, text="‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω", reply_markup=nav.control_menu)


@dp.message_handler()
async def check_message(message: types.Message):
    global globalState
    if message.chat.type != "private" and not base_is_empty and globalState is WorkingStates.work:
        participants = account_and_category_repo.getAccountsForCategoryByName("Fulfilment")
        with open('keywords.txt', 'r') as f:
            regex_list = f.readlines()
        for regex in regex_list:
            if re.search(regex.strip().lower(), message.text.lower()):
                for person in participants:
                    keyboard_for_lead = InlineKeyboardMarkup(row_width=1).insert(InlineKeyboardButton(text='üë®‚Äçüè≠ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º', url="https://t.me/" + message.from_user.username)).insert(InlineKeyboardButton(text='‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞', callback_data='warn_author'))
                    await bot.send_message(person.account_telegram_id, message.text, reply_markup=keyboard_for_lead)
                return


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
